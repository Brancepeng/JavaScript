
JavaScript 语句简洁灵活而又紧凑，特别是控制流语句，你可以用它构建结合交互式的应用程序。本章节我们将带来关于JavaScript语句的一
些概览。

语句块：
大多数程序都使用语句块来给语句分组，这样可以使语句的结构清晰明了。我们使用一对花括号（ {} ）来分组语句块，如下所示：

{
   statement_1;   statement_2;
   statement_3;
   ...
   statement_n;
}

语句块通常用于流程控制，如 if, for, while等等。

while (x < 10){
  x++;
}

这里{ x++; } 就是语句块。

注：在ecmascript 6 之前，javascript没有块作用域。如果你在块的外部声明了一个变量，然后在块中声明了一个相同变量名的变量，并
赋予不同的值。那么在程序执行中将会使用块中的值，这样做虽然是合法的，但是这不同于JAVA与C。示例：

var x = 1;
{
  var x = 2;
}
alert(x); // 输出的结果为 2

这段代码的输出是2，这是因为 var x = 2 的作用范围与 var x = 1 的作用范围相同，在C语言或是Java语言中，同样的代码输出的
结果是1。

条件判断语句：Conditional Statements
在if..else判断条件中，下面的值将会被视为false：
false，undefined，null，0，NaN，空字符串（''）

循环语句：Loop Statements


中断语句：break Statements
使用中断语句终止循环、开关或与标签语句连接。
当你使用没有带标签语句的中断语句（break）时，while，do-while，for或者switch封闭的内部语句将立即终止，并转移到后面的语句执行。

第一种语法形式用于终止在循环体或者switch的封闭内部；

for (i = 0; i < a.length; i++) {
   if (a[i] == theValue)
      break;
}

对象操作语句：

 for...in 语句迭代一个指定的变量去遍历这个对象的属性，每个属性，javascript 执行指定的语句。一个for...in 语句示例如下：

 for (variable in object) {
    statements
 }

 异常处理语句：Exception Handing Statements


 Promises (重点)
 从 ECMAScript 6 开始，JavaScript 增加了对 Promise 对象的支持，它允许你对延时和异步操作流进行控制。

 Promises有一下几种状态：

 pending:进行中，初始状态，即正在进行，不处于fulfilled或者rejected状态。

 fulfilled：已完成，成功的完成了操作。

 rejected：已失败，没有完成操作。
 settled：已解决，此时Promise处于fulfilled或者rejected二者状态中的任何一个，不会是pending。

详情见：images/promise.png

通过 XHR 加载图片

这里有一个未注释的版本，展现了 Promise 的工作流:

function imgLoad(url) {
  return new Promise(function(resolve, reject) {
    var request = new XMLHttpRequest();
    request.open('GET', url);
    request.responseType = 'blob';
    request.onload = function() {
      if (request.status === 200) {
        resolve(request.response);
      } else {
        reject(Error('Image didn\'t load successfully; error code:'
                     + request.statusText));
      }
    };
    request.onerror = function() {
      reject(Error('There was a network error.'));
    };
    request.send();
  });
}

下面是MDN关于Functions的描述：

函数是搭建javascript的基本构建之一。一个函数本身就是一段javascript程序-包含用于执行某一任务或者计算的
一系列语句。

函数创建除了表达式和声明式之外，也可以在运行时Function构造器由一个字符串来创建一个函数，很像eval()函数。
当一个对象的属性是函数时，其称之为方法。

重点：

    要想调用某个函数，你必须在想要调用这个函数的执行域的某处定义它。


重点：http://javascript.ruanyifeng.com/grammar/function.html  中的函数值传递方式

    1.原始类型的值，传入函数f的方式是传值传递。因此，在函数内部，
    参数的值是原始值的拷贝，无论怎么修改，都不会影响到原始值。
    var p = 2;

    function f(p) {
      p = 3;
    }
    f(p);

    p // 2

    2.但是，如果函数参数是复合类型的值（数组、对象、其他函数），传递方式是传址传递（pass by reference）。
    也就是说，传入函数的原始值的地址，因此在函数内部修改参数，将会影响到原始值。

    var obj = {p: 1};

    function f(o) {
      o.p = 2;
    }
    f(obj);

    obj.p // 2

    注意，如果函数内部修改的，不是参数对象的某个属性，而是替换掉整个参数，这时不会影响到原始值。
    var obj = [1, 2, 3];

    function f(o){
      o = [2, 3, 4];
    }
    f(obj);

    obj // [1, 2, 3]

    上面代码中，在函数f内部，参数对象obj被整个替换成另一个值。这时不会影响到原始值。这是因为，形式参数（o）
    与实际参数obj存在一个赋值关系。
    // 函数f内部
    o = obj;

    最上面代码中，对o的修改都会反映在obj身上。但是，如果对o赋予一个新的值(最下面的代码)，就等于切断了o与obj的
    联系，导致此后的修改都不会影响到obj了。

    某些情况下，如果需要对某个原始类型的变量，获取传址传递的效果，可以将它写成全局对象的属性。
    var a = 1;

    function f(p) {
      window[p] = 2;
    }
    f('a');

    a // 2

    上面代码中，变量a本来是传值传递，但是写成window对象的属性，就达到了传址传递的效果。

函数表达式用处：

    函数表达式在将函数作为一个引用传递给其他函数十分方便。
    下面的例子演示了一个叫map的函数如何被定义，而后调用一个匿名函数作为其第一个参数：
    function map(f,a) {
      var result = [], // 创建一个新的数组
          i;

      for (i = 0; i != a.length; i++)
        result[i] = f(a[i]);
      return result;
    }

    map(function(x) {return x * x * x}, [0, 1, 2, 5, 10]);

    将函数表达式作为参数，好处就是充分达到语句或者函数功能复用性。


/**
JavaScript中函数所有的参数都是按值传递的,参数是Object类型也是一样,只不过传递的是地址z值.
下面这个例子充分说明了:

function setName(obj){
    obj.name = 'Jack';

    obj = new Object();
    obj.name = 'jessy';
}

var person = new Object();
setName(person);
console.log(person.name); //Jack
**/
调用函数：

    重点：

    被调用的函数一定要处于他们的作用域中，但是函数的申明可以在他们的调用语句之后，，如下面的例子：

    console.log(square(5));
    /* ... */
    function square(n) { return n*n }

    重点：

    函数作用域是指函数申明时所在的地方，或者函数在顶级被声明时只整个程序。

    函数的作用域：（重点）
    1.在函数内定义的变量不能从函数之外的任何地方取得，因为变量仅仅在该函数的域的内部有定义。相对应的，
    一个函数可以取得在它的域中定义的任何变量和子函数。
    2.
函数扩充:详情见http://javascript.ruanyifeng.com/grammar/function.html

圆括号,return语句和递归:

函数体内部的return语句，表示返回。JavaScript引擎遇到return语句，就直接返回return后面的那个表达式的值，
后面即使还有语句，也不会得到执行。也就是说，return语句所带的那个表达式，就是函数的返回值。return语句不是
必需的，如果没有的话，该函数就不返回任何值，或者说返回undefined。

函数可以调用自身，这就是递归（recursion）。下面就是通过递归，计算斐波那契数列的代码。

function fib(num) {
  if (num === 0) return 0;
  if (num === 1) return 1;
  return fib(num - 2) + fib(num - 1);
}

fib(6) // 8

第一等公民;

JavaScript将函数看做一种值,与其他值(数值,字符串,布尔值)地位相同,凡是能使用值地方就能使用函数.比如，可
以把函数赋值给变量和对象的属性，也可以当作参数传入其他函数，或者作为函数的结果返回。函数只是一个可以执
行的值，此外并无特殊之处。
由于函数与其他数据类型地位平等，所以在JavaScript语言中又称函数为第一等公民。
function add(x, y) {
  return x + y;
}

// 将函数赋值给一个变量
var operator = add;

// 将函数作为参数和返回值
function a(op){
  return op;
}
a(add)(1, 1)
// 2

函数的arguments对象

由于JavaScript允许函数有不定数目的参数，所以我们需要一种机制，可以在函数体内部读取所有参数。这就是arguments对象的由来。
arguments对象包含了函数运行时的所有参数，arguments[0]就是第一个参数，arguments[1]就是第二个参数，以此类推。这
个对象只有在函数体内部，才可以使用。
arguments是一个对象,数组专有的方法（比如slice和forEach），不能在arguments对象上直接使用。
要让arguments对象使用数组方法，真正的解决方法是将arguments转为真正的数组。
下面是两种常用的转换方法：slice方法和逐一填入新数组。
var args = Array.prototype.slice.call(arguments);

// or

var args = [];
for (var i = 0; i < arguments.length; i++) {
  args.push(arguments[i]);
}

argumnets对象有一个callee属性,返回他对应的原函数.
可以通过arguments.callee，达到调用函数自身的目的。这个属性在严格模式里面是禁用的，因此不建议使用。

重点:闭包(closure)
闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现.
详情见:http://javascript.ruanyifeng.com/grammar/function.html
要理解闭包，首先必须理解变量作用域。前面提到，JavaScript有两种作用域：全局作用域和函数作用域。
函数内部可以直接读取全局变量。
var n = 999;

function f1() {
  console.log(n);
}
f1() // 999

上面代码中，函数f1可以读取全局变量n。

但是，在函数外部无法读取函数内部声明的变量。

function f1() {
  var n = 999;
}

console.log(n)
// Uncaught ReferenceError: n is not defined(

上面代码中，函数f1内部声明的变量n，函数外是无法读取的。

如果出于种种原因，需要得到函数内的局部变量。正常情况下，这是办不到的，只有通过变通方法才能实现。
那就是在函数的内部，再定义一个函数。

function f1() {
  var n = 999;
  function f2() {
　　console.log(n); // 999
  }
}

上面代码中，函数f2就在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，
对f1就是不可见的。这就是JavaScript语言特有的”链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有
父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。
既然f2可以读取f1的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！

function f1() {
  var n = 999;
  function f2() {
    console.log(n);
  }
  return f2;
}

var result = f1();
result(); // 999

上面代码中，函数f1的返回值就是函数f2，由于f2可以读取f1的内部变量，所以就可以在外部获得f1的内部变量了。

闭包就是函数f2，即能够读取其他函数内部变量的函数。由于在JavaScript语言中，只有函数内部的子函数才能读取内部变
量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。闭包最大的特点，就是它可以“记住”诞生的环境，比如f2记住了
它诞生的环境f1，所以从f2可以得到f1的内部变量。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。

闭包的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量始终保持在内存中，即闭包可以使得它诞生
环境一直存在。请看下面的例子，闭包使得内部变量记住上一次调用时的运算结果。
function createIncrementor(start) {
  return function () {
    return start++;
  };
}

var inc = createIncrementor(5);

inc() // 5
inc() // 6
inc() // 7

上面代码中，start是函数createIncrementor的内部变量。通过闭包，start的状态被保留了，每一次调用都是在上一次调用
的基础上进行计算。从中可以看到，闭包inc使得函数createIncrementor的内部环境，一直存在。所以，闭包可以看作是函
数内部作用域的一个接口。为什么会这样呢？原因就在于inc始终在内存中，而inc的存在依赖于createIncrementor，因
此也始终在内存中，不会在调用结束后，被垃圾回收机制回收。

闭包的另一个用处,就是封装对象的私有属性和私有方法.

function Person(name) {
  var _age;
  function setAge(n) {
    _age = n;
  }
  function getAge() {
    return _age;
  }

  return {
    name: name,
    getAge: getAge,
    setAge: setAge
  };
}

var p1 = Person('张三');
p1.setAge(25);
p1.getAge() // 25

上面代码中，函数Person的内部变量_age，通过闭包getAge和setAge，变成了返回对象p1的私有变量。
之所以称为私有变量,在函数外部不能直接获取.必须通过return这个关键字暴露出来后才能在外部访问.
注意，外层函数每次运行，都会生成一个新的闭包，而这个闭包又会保留外层函数的内部变量，所以内存消耗很大。因
此不能滥用闭包，否则会造成网页的性能问题。

重点:立即调用的函数表达式:详情见:http://www.jb51.net/article/105450.htm
在Javascript中，一对圆括号()是一种运算符，跟在函数名之后，表示调用该函数。比如，print()就表示调用print函数。
有时，我们需要在定义函数之后，立即调用该函数。这时，你不能在函数的定义之后加上圆括号，这会产生语法错误。

function(){ /* code */ }();
// SyntaxError: Unexpected token (
产生这个错误的原因是，function这个关键字即可以当作语句，也可以当作表达式。

// 语句
function f() {}

// 表达式
var f = function f() {}

为了避免解析上的歧义，JavaScript引擎规定，如果function关键字出现在行首，一律解释成语句。因此，JavaScript引擎
看到行首是function关键字之后，认为这一段都是函数的定义，不应该以圆括号结尾，所以就报错了。

解决方法就是不要让function出现在行首，让引擎将其理解成一个表达式。最简单的处理，就是将其放在一个圆括号里面。
(function(){ /* code */ }());
// 或者
(function(){ /* code */ })();
上面两种写法都是以圆括号开头，引擎就会认为后面跟的是一个表示式，而不是函数定义语句，所以就避免了错误。这就叫
做“立即调用的函数表达式”（Immediately-Invoked Function Expression），简称IIFE。

注意，上面两种写法最后的分号都是必须的。如果省略分号，遇到连着两个IIFE，可能就会报错。
// 报错
(function(){ /* code */ }())
(function(){ /* code */ }())
上面代码的两行之间没有分号，JavaScript会将它们连在一起解释，将第二行解释为第一行的参数。

推而广之，任何让解释器以表达式来处理函数定义的方法，都能产生同样的效果，比如下面三种写法

var i = function(){ return 10; }();
true && function(){ /* code */ }();
0, function(){ /* code */ }();
甚至像下面这样写，也是可以的。
!function(){ /* code */ }();
~function(){ /* code */ }();
-function(){ /* code */ }();
+function(){ /* code */ }();
new关键字也能达到这个效果。

new function(){ /* code */ }

new function(){ /* code */ }()
// 只有传递参数时，才需要最后那个圆括号

通常情况下,只对匿名函数使用这种立即执行的函数表达式.
他的目的有两个:
a.不必为了函数命名,b里面了污染全局变量.
b.IIFE内部形成了一个单独的作用域,可以封装一些外部无法读取的私有变量.

// 写法一
var tmp = newData;
processData(tmp);
storeData(tmp);

// 写法二
(function (){
  var tmp = newData;
  processData(tmp);
  storeData(tmp);
}());

上面代码中，写法二比写法一更好，因为完全避免了污染全局变量。

6.eval命令

eval命令的作用是,将字符串当做语句执行.
详情见:http://javascript.ruanyifeng.com/grammar/function.html