
JavaScript 语句简洁灵活而又紧凑，特别是控制流语句，你可以用它构建结合交互式的应用程序。本章节我们将带来关于JavaScript语句的一
些概览。

语句块：
大多数程序都使用语句块来给语句分组，这样可以使语句的结构清晰明了。我们使用一对花括号（ {} ）来分组语句块，如下所示：

{
   statement_1;   statement_2;
   statement_3;
   ...
   statement_n;
}

语句块通常用于流程控制，如 if, for, while等等。

while (x < 10){
  x++;
}

这里{ x++; } 就是语句块。

注：在ecmascript 6 之前，javascript没有块作用域。如果你在块的外部声明了一个变量，然后在块中声明了一个相同变量名的变量，并
赋予不同的值。那么在程序执行中将会使用块中的值，这样做虽然是合法的，但是这不同于JAVA与C。示例：

var x = 1;
{
  var x = 2;
}
alert(x); // 输出的结果为 2

这段代码的输出是2，这是因为 var x = 2 的作用范围与 var x = 1 的作用范围相同，在C语言或是Java语言中，同样的代码输出的
结果是1。

条件判断语句：Conditional Statements
在if..else判断条件中，下面的值将会被视为false：
false，undefined，null，0，NaN，空字符串（''）

循环语句：Loop Statements


中断语句：break Statements
使用中断语句终止循环、开关或与标签语句连接。
当你使用没有带标签语句的中断语句（break）时，while，do-while，for或者switch封闭的内部语句将立即终止，并转移到后面的语句执行。

第一种语法形式用于终止在循环体或者switch的封闭内部；

for (i = 0; i < a.length; i++) {
   if (a[i] == theValue)
      break;
}

对象操作语句：

 for...in 语句迭代一个指定的变量去遍历这个对象的属性，每个属性，javascript 执行指定的语句。一个for...in 语句示例如下：

 for (variable in object) {
    statements
 }

 异常处理语句：Exception Handing Statements


 Promises (重点)
 从 ECMAScript 6 开始，JavaScript 增加了对 Promise 对象的支持，它允许你对延时和异步操作流进行控制。

 Promises有一下几种状态：

 pending:进行中，初始状态，即正在进行，不处于fulfilled或者rejected状态。

 fulfilled：已完成，成功的完成了操作。

 rejected：已失败，没有完成操作。
 settled：已解决，此时Promise处于fulfilled或者rejected二者状态中的任何一个，不会是pending。

详情见：images/promise.png

通过 XHR 加载图片

这里有一个未注释的版本，展现了 Promise 的工作流:

function imgLoad(url) {
  return new Promise(function(resolve, reject) {
    var request = new XMLHttpRequest();
    request.open('GET', url);
    request.responseType = 'blob';
    request.onload = function() {
      if (request.status === 200) {
        resolve(request.response);
      } else {
        reject(Error('Image didn\'t load successfully; error code:'
                     + request.statusText));
      }
    };
    request.onerror = function() {
      reject(Error('There was a network error.'));
    };
    request.send();
  });
}

下面是MDN关于Functions的描述：

函数是搭建javascript的基本构建之一。一个函数本身就是一段javascript程序-包含用于执行某一任务或者计算的
一系列语句。

函数创建除了表达式和声明式之外，也可以在运行时Function构造器由一个字符串来创建一个函数，很像eval()函数。
当一个对象的属性是函数时，其称之为方法。

重点：

    要想调用某个函数，你必须在想要调用这个函数的执行域的某处定义它。


原始参数（原始类型的值，比如一个具体的数字），被作为值传递给函数（pass to function by value）；
重点：

    1.值被传递给函数，如果被调函数改变了这个参数的值，这样的改变不会影响到全局或者调用的函数。

    2.如果你传递一个对象（pass on object，即一个费原始类型的值，non-primitive value),例如Array，或者用户自定义的
     其他对象，作为参数，而函数改变了这个对象的属性。这样的改变对函数外部是可见的。

函数表达式用处：

    函数表达式在将函数作为一个引用传递给其他函数十分方便。
    下面的例子演示了一个叫map的函数如何被定义，而后调用一个匿名函数作为其第一个参数：
    function map(f,a) {
      var result = [], // 创建一个新的数组
          i;

      for (i = 0; i != a.length; i++)
        result[i] = f(a[i]);
      return result;
    }

    map(function(x) {return x * x * x}, [0, 1, 2, 5, 10]);

    将函数表达式作为参数，好处就是充分达到语句或者函数功能复用性。

调用函数：

    重点：

    被调用的函数一定要处于他们的作用域中，但是函数的申明可以在他们的调用语句之后，，如下面的例子：

    console.log(square(5));
    /* ... */
    function square(n) { return n*n }

    重点：

    函数作用域是指函数申明时所在的地方，或者函数在顶级被声明时只整个程序。

    函数的作用域：（重点）
    1.在函数内定义的变量不能从函数之外的任何地方取得，因为变量仅仅在该函数的域的内部有定义。相对应的，
    一个函数可以取得在它的域中定义的任何变量和子函数。
    2.





