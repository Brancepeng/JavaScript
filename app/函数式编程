


上面再讲到函数是“第一等公民”时，提到了函数式编程。索性就多了解了解函数式编程。

目前，就前端而言，随着函数式编程（function programming）开始获得越来越多的关注。

比如Scala,F#等等，目前最当红的Python，Ruby，Javascript，对函数式编程的支持都很强，就连老牌面向对象的java，
面向过程的PHP，都忙不迭的加入对匿名函数的支持。函数式编程开始慢慢走近生产环境中，而不是传播与学术界了。
也许在继“面向对象编程”后，函数式编程会成为下一个主流范式（paradigm），未来的程序员恐怕或多或少都要懂一点。

下面关于函数式编程的知识主要参考阮一峰老师的博客。

简单说，"函数式编程"是一种"编程范式"（programming paradigm），也就是如何编写程序的方法论。

它属于"结构化编程"的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。举例来说，现在有这样一个数学表达式：

(1 + 2) * 3 - 4


传统的过程式编程，可能这样写：

var a = 1 + 2;
　　var b = a * 3;
　　var c = b - 4;


函数式编程要求使用函数，我们可以把运算过程定义为不同的函数，然后写成下面这样：


var result = subtract(multiply(add(1,2), 3), 4);


这就是函数式编程。



函数式编程的特点：



1.函数是第一等公民。

所谓"第一等公民"（first class），指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，
也可以作为参数，传入另一个函数，或者作为别的函数的返回值。



举例来说，下面代码中的print变量就是一个函数，可以作为另一个函数的参数。

var print = function(i){ console.log(i);};

　　[1,2,3].forEach(print);




2.只用'表达式'，'不用语句'

'表达式'是一种单独的运算过程，总有返回值。’语句‘是执行某种操作，没有返回值。

函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。
原因是函数式编程的开发动机，一开始就是为了处理运算（computation），不考虑系统的读写（I/O）。
"语句"属于对系统的读写操作，所以就被排斥在外。




3.没有副作用，

所谓副作用，就是指函数内部与外部互动，（最典型情况就是修改全局变量的值），产生运算以外的其他结果。


函数式编程强调没有"副作用"，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其
是不得修改外部变量的值。



4.不修改状态，

上一点提到，函数式编程只是返回新的值，不修改系统变量。因此，不修改系统变量，也是他的一个特点。

在其他语言中，变量往往用来保存’状态‘（state）。不修改变量，意味着状态不能保存在变量中，函数式编程使用
参数保存状态，最好的例子就是递归。

下面的代码是一个将字符串逆序排列的函数，它演示了不同的参数如何决定了运算所处的"状态"。


function reverse(string) {
　　　　if(string.length == 0) {
　　　　　　return string;
　　　　} else {
　　　　　　return reverse(string.substring(1, string.length)) + string.substring(0, 1);
　　　　}
　　}


由于使用了递归，函数式语言的运行速度比较慢，这是它长期不能在业界推广的主要原因。


5,引用透明

指的是函数的运作，不依赖外部变量或者状态，只依赖输入的参数。任何时候，只要输入参数相同，引用函数得到的
返回值总是一样的。

三.函数式编程道理有什么好处，为什么变得越来越流行？


1. 代码简洁，开发快速
函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。
Paul Graham在《黑客与画家》一书中写道：同样功能的程序，极端情况下，Lisp代码的长度可能是C代码的二十分之一。



2. 更方便的代码管理
  函数式编程不依赖、也不会改变外界的状态，只要给定输入参数，返回的结果必定相同。因此，每一个函数都可以被看做独立
  单元，很有利于进行单元测试（unit testing）和除错（debugging），以及模块化组合。


3.易于“并发编程”


函数式编程不需要考虑“死锁”（deadlock），因为它不修改变量，所以根本不存在锁线程的问题。不必担心一个线程的数据被另一个线程修改
，所以可以很放心地把工作分摊到多个线程，部署"并发编程"（concurrency）。


看下面代码：

    var s1 = Op1();

    var s2 = Op2();

    var s3 = concat(s1,s2);

    由于s1和s2互不干扰，不会修改变量，谁先执行是无所谓的，所以可以放心地增加线程，把它们分配在两个线程上完成。
    其他类型的语言就做不到这一点，因为s1可能会修改系统状态，而s2可能会用到这些状态，所以必须保证s2在s1之后运行，
    自然也就不能部署到其他线程上了。
 多核CPU是将来的潮流，所以函数式编程的这个特性非常重要。


4.代码热升级


函数式编程没有副作用，只有保证接口不变，内部实现是与外部无关的。所以可以在运行状态下直接升级代码，不需要重启
，也不需要停机。Erlang语言早就证明了这一点，它是瑞典爱立信公司为了管理电话系统而开发的，电话系统的升级当然是不能停机的。

