先抛开前端框架和后端框架的区别。先说说什么是前端框架？前端框架有什么意义？

先谈谈第一个话题。

说道前端框架，为什么会产生？很简单，复杂的软件必须有清晰合理的架构，否则无法开发和维护。伴随着一些 Web 产品
逐渐往应用方向发展，遇到了在 C/S 领域相同的问题：由于前端功能的增强、代码的膨胀，导致不得不做“前端的架构”
这个事情了。

在回答这些问题之前，先要理清一些历史：前端什么时候有框架的？

早期前端都是比较简单，基本以页面为工作单元，内容以浏览型为主，也偶尔有简单的表单操作，
这个时期每个界面上只有很少的 JavaScript 逻辑，基本不太需要框架。随着 AJAX 的出现，Web2.0的兴起，
人们可以在页面上可以做比较复杂的事情了，然后前端框架才真正出现了，以 jQuery 为代表，针对界面上常见
的 DOM 操作，远程请求，数据处理等作了封装，也有专注于处理数据的Underscore，严格来说，这些都不能算
框架，而是算库。

库和框架是有一些区别的：库是一种工具，我提供了，你可以不用，即使你用了，也没影响你自
己的代码结构。框架则是面向一个领域，提供一套解决方案，如果你用我，就得按照我的方式办事。

按照这个定义，jQuery 和 Underscore 都只能算是库，ExtJS 和 dojo 算框架。

MV*框架又是为什么兴起的呢？它的出现，伴随着一些 Web 产品逐渐往应用方向发展，遇到了
在 C/S 领域相同的问题：由于前端功能的增强、代码的膨胀，导致不得不做“前端的架构”这个事情了。

jQuery 的思维方式是：以 DOM 操作为中心。

MV*框架的思维方式是：以模型为中心，DOM 操作只是附加。

所以，在什么情况下，需要用到前端框架？

这个是要看产品类型的，如果是页面型产品，多数确实不太需要它，因为页面中的 JavaScript
代码中处理交互的绝对远远超过处理模型的，但是如果是应用软件类产品，这就太需要了。







