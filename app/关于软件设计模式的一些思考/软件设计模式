什么是MVC模式？它是为了解决哪类问题而提出来的方案？它是如何解决这类问题的？

要想知道什么是设计模式，得先了解什么是软件设计模式？

设计模式是一套被反复使用，所有人知晓的，经过分类编目的一套代码设计经验的总结。

a.它是经验的总结;抱着「代码虐我千百遍，我待代码如初恋」的心态，最终得出来的「套路」。

b.一定要在合适的场景中使用：要对设计模式的使用场景有一定的认识后才使用，「不要滥用」。
如：输出一句“hello world”，非要强行给加上各种模式。问：“为什么”，答：“总感觉少了模式！”。

c.巧妙的解决了很多问题：被广泛应用的原因。

为什么要提倡“Design Pattern呢？根本原因是为了代码复用，增加可维护性。那么怎么才能实现代码复用呢？





一：设计模式分为三种类型：
1.创建型模式：单例模式，抽象工厂模式，建造者模式，工厂模式，原型模式。
2.结构性模式：适配器模式，桥接模式，装饰模式，组合模式、外观模式、享元模式、代理模式。
3.行为型模式：模块方法模式，命令模式，迭代器模式，观察者模式，中介者模式，备忘录模式，解释器模式(Interpreter),
状态模式，策略模式，职责链模式(责任链模式)、访问者模式。

二：模式设计的六大原则：

1.开闭原则（Open Close Principle）:

意思：软件模块应该对扩展开放，对修改关闭。

举例：在程序需要进行新增功能的时候，不能去修改原有的代码，而是新增代码，实现一个热插拔的效果
（热插拔：灵活的去除或添加功能，不影响到原有的功能）。

目的：为了使程序的扩展性好，易于维护和升级。

2.里氏代换原则(Liskov Substitution Principle 简称 LSP)
意思：里氏代换原则是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，
基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。

举例：球类，原本是一种体育用品，它的衍生类有篮球、足球、排球、羽毛球等等，如果衍生类替换了基类的原本方法，
如把体育用品改成了食用品（那么软件单位的功能受到影响），就不符合里氏代换原则。


目的：对实现抽象化的具体步骤的规范。

注：基类：通过继承机制，可以利用已有的数据类型来定义新的数据类型。所定义的新的数据类型不仅拥有新定义的成员，
而且还同时拥有旧的成员。我们称已存在的用来派生新类的类为父类，也就是基类。派生出来的类称为该基类的衍生类。


3.依赖倒转原则(Dependence Inversion Principle)：

意思：针对接口编程，而不是针对实现编程。

举例：以计算机系统为例，无论主板、CPU、内存、硬件都是在针对接口设计的，如果针对实现来设计，
内存就要对应到针对某个品牌的主板，那么会出现换内存需要把主板也换掉的尴尬。


目的：降低模块间的耦合。


4.接口隔离原则(Interface Segregation Principle);

使用多个隔离的接口，比使用单个接口要好。

举例：比如：登录，注册时属于用户模块的两个接口，比写成一个接口好。

目的：提高程序设计灵活性。

5.迪米特法则(最少知道原则)（Demeter Principle）;

意思：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。

举例：一个类公开的public属性或方法越多，修改时涉及的面也就越大，变更引起的风险扩散也就越大。

目的：降低类之间的耦合，减少对其他类的依赖。

6.单一职责原则：

注：该原则由罗伯特·C·马丁（Robert C. Martin）于《敏捷软件开发：原则、模式和实践》一书中给出的。
马丁表示此原则是基于汤姆·狄马克(Tom DeMarco)和Meilir Page-Jones的著作中的内聚性原则发展出的。

意思：一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。
举例：该原则意思简单到不需要举例！
目的：类的复杂性降低，可读性提高，可维护性提高。










