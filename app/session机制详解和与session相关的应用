
1.什么是session?
在计算机专业术语里，session是指一个终端用户与交互系统进行通信的时间间隔，通常指登入系统到注销系统之间所经过的时间，
以及如果需要的话，可能还有一定的操作空间。
具体到web应用里的session，大家都做过web开发，这里我就先不提出web里session的定义，先和大伙讲下和session相关的技术背景。

早期的web应用或者说早期的网站都是一种处理静态资源的网站，功能主要是查看文档，看看图片，而现在的web应用和早期的差别已
经很大，互联网的网站更准确的定义应该是互联网软件即网站就是软件，网站所代表的软件和早期软件的定义是不一样的，早期的软
件都是在单机环境下运行，而互联网的普及让软件和网络技术融合在一起，这就要求网站所代表的软件应该要有一个对事务处理的
记忆功能，事务处理的记忆功能就是我们常说的要有状态。而实现web应用技术的核心http协议是一个无状态的协议，http这种设
计也许是历史遗留问题，也许无状态的http是最简单也是最有效的通讯方式，但是当网站成为软件后，状态的保持就是一个很重
要的功能。

因此，在web应用开发中就出现了保持http链接状态的技术：一个是cookie技术，一个是session技术。


cookie是客户端的解决方案（当然随着HTML5的出现，比cookie更为强劲和安全的技术出现了，这里不做讨论），cookie就是
由服务器发给客户端的特殊信息，而这些信息以文本文件的方式存放在客户端，，然后客户端每次向服务器发送请求的时候都会带上这些特殊的信息。

让我们说的跟具体一些：当用户使用浏览器访问一个支持cookie的网站时候，用户会提供包括用户名在内的个人信息并且提交至服务器；
接着，服务器在向客户端回传相应的超文本的同时也会发回这些个人信息，当然这些信息并不是存放在HTTP响应体（Response Body）中的，
而是存放于HTTP响应头（Response Header）；当客户端浏览器接收到来自服务器的响应之后，浏览器会将这些信息存放在一个统
一的位置，对于Windows操作系统而言，我们可以从： [系统盘]:\Documents and Settings\[用户名]\Cookies目录中找到存储
的Cookie；当客户端浏览器接收到来自服务器的响应之后，浏览器会将这些信息存放在一个统一的位置，对于Windows操作系统而
言，我们可以从： [系统盘]:\Documents and Settings\[用户名]\Cookies目录中找到存储的Cookie；有了Cookie这样的技术
实现，服务器在接收到来自客户端浏览器的请求之后，就能够通过分析存放于请求头的Cookie得到客户端特有的信息，从而动态生
成与该客户端相对应的内容。

通常，我们可以从很多网站的登录界面中看到“请记住我”这样的选项，如果你勾选了它之后再登录，那么在下一次访问该网站的时
候就不需要进行重复而繁琐的登录动作了，而这个功能就是通过Cookie实现的。（这是以前的做法。。。）

session技术则是服务端的解决方案，它是通过服务器来保持状态的。由于Session这个词汇包含的语义很多，因此需要在这里明确
一下 Session的含义。首先，我们通常都会把Session翻译成会话，因此我们可以把客户端浏览器与服务器之间一系列交互的动作
称为一个 Session。

从这个语义出发，我们会提到Session持续的时间，会提到在Session过程中进行了什么操作等等；其次，Session指的是服务器
端为客户端所开辟的存储空间，在其中保存的信息就是用于保持状态。从这个语义出发，我们则会提到往Session中存放什么内容，
如何根据键值从 Session中获取匹配的内容等。要使用Session，第一步当然是创建Session了。那么Session在何时创建呢？当
然还是在服务器端程序运行的过程中创建的，不同语言实现的应用程序有不同创建Session的方法，而在Java中是通过
调用HttpServletRequest的getSession方法（使用true作为参数）创建的。


在创建了Session的同时，服务器会为该Session生成唯一的Session id，而这个Session id在随后的请求中会被用来重新获得
已经创建的Session；在Session被创建之后，就可以调用Session相关的方法往Session中增加内容了，而这些内容只会保存在
服务器中，发到客户端的只有Session id；当客户端再次发送请求的时候，会将这个Session id带上，服务器接受到请求之后
就会依据Session id找到相应的Session，从而再次使用之。正式这样一个过程，用户的状态也就得以保持了。



由此我们可以得出：

session是解决http协议无状态问题的服务端解决方案，它能让客户端和服务端一系列交互动作变成一个
完整的事务，能使网站变成一个真正意义上的软件。




那么，cookie和session是什么关系呢？

cookie和session虽然分别属于客户端和服务端，但是服务端的session的实现对客户端的cookie是有依赖的，上面我讲
到服务端执行session机制时候会生成session的id值，这个id值会发送给客户端，客户端每次请求都会把这个id值放
到http请求的头部发送给服务端，而这个id值在客户端会保存下来，保存的容器就是cookie，因此当我们完全禁掉浏览
器的cookie的时候，服务端的session也会不能正常使用。



