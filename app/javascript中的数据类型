

学习一门编程语言，无非两方面：一是语法，而是数据类型。

类C语言的语法不外乎if,while,for,函数，算数运算等，面向对象语言在加上object。

语法只是语言设计者预先做的一套规则，不同语言语法不尽相同，但都有一些共通点，对于熟悉一两门编程语言的人，
学其他的编程语言时，语法往往不是问题（当然，如果你一直学的是类C语言，那么首次接触lisp时肯定也要花些时间），
学习的重点往往是数据类型及其相关操作上，不是有句老话：“数据结构＋算法＝程序”！其次，有些语言的语法本身就存在
设计问题（javascript更甚），我们没必要深究这些点，当然，如果你自诩geek，可以把玩把玩。


本文将对javascript做一个详细的介绍。


强类型 VS  弱类型

鉴于javascript的设计理念，javascript被设计成一种弱类型的语言。

在强类型的语言，每个表达式的类型都能够在编译时确定，并且只允许适用于该类型的操作；
弱类型的语言允许对任意类型施加任何操作，只是这个操作有可能在运行时报错。


数据类型：


根据ECMAScript 5.1的规范，javascript中共有六种数据类型，分别为：Undefined, Null, Boolean, Number, String、Object。前五种属于基本类型，最后一种属于对象类型。


基本数据类型
Undefined类型只有一个值，为undefined，意味着“空值(no value)”，适用于所有数据类型。
Null类型只有一个值，为null，意味着“空对象(no object)”，只适用于对象类型。
Boolean类型有两个值，为true与false
Number类型的值是遵循IEEE 754标准的64位浮点数的集合，类似于Java的double。没有整型数据结构。此外还包含三个特殊的值：NaN、Infinity、-Infinity
String类型的值是有穷个Unicode字符的集合。必须用'或"括起来。


基本类型的string与对象类型的string区别
在javascript是区分基本类型的string与对象类型的string（Number、Boolean与之类似）。
使用字面量方式创建的字符串，为基本类型的string
使用String()创建的字符串，为基本类型的string
使用new String()的方式创建的字符串，为对象类型的string

当string类型转化为对象类型时，


str1 = "javascript"
str2 = String("javascript")
str3 = new String("javascript")
> typeof str1
"string"
> typeof str2
"string"
> typeof str3
"object"


javascript会在合适的时候自动把基本类型的string转为对象类型的string，也就是说我们可以对基本类型string使用String.prototype中的方法。这两者也可以进行显式转化。


// 基本类型----->对象类型
str1 = "javascript"
str1 = new String(str1)
> typeof str1
"object"
// 对象类型----->基本类型
str1 = new String("javascript")
str1 = str1.valueOf()
> typeof str1
"string"


这两者用在eval函数中时，结果有所区别：

var s1 = '2 + 2';
var s2 = new String('2 + 2');
> eval(s1)
4
> eval(s2)
[String: '2 + 2']   //这里还是返回的string对象


null与undefined


null表示空
undefined表示不存在。没有初始化的变量、函数中缺失的参数、函数没有显式return值时都为此值。


在一般语言中，都用null来表示空值，javascript中为什么多了个undefined呢？


这是历史原因造成的；


javascript采用了java的语法，把类型分为基本类型和对象类型。java中用null来表示空对象，javascript想当然的基础功能了过来，
在c语言中，null在转为数字时为0，javascript也采取相同的方式：

> Number(null)
0
> 5 + null
5


在javascript1.0时，还没有异常处理(exception handling)，对于一些异常情况（没有初始化的变量、调用函数时缺失的参数
等），需要标明为一种特殊的值，null本来是个很好的选择，但是Brendan Eich同时想避免下面两件事：


这个特殊值不应该有引用的特性，因为那是对象特有的；

这个特殊值不能转化为0，因为这样不容易发现程序中的错误。


基于这两个原因，Brendan Eich选择了undefined，它可以被强转为NaN。



> Number(undefined)
NaN
> 5 + undefined
NaN


两者在于JSON打交道时，结果也截然不同。

> JSON.parse(null)
null
> JSON.parse(undefined)
//Firfox SyntaxError: JSON.parse: unexpected character at line 1 column 1 of the JSON data
//Chrome SyntaxError: Unexpected token u
> JSON.stringify(null)
"null"
> JSON.stringify(undefined)
undefined


对象类型：



javascript作为一门脚本语言，本身功能十分精简，很多功能（文件读写，网络）都是有宿主环境提供，宿主环境与javascript语言的
桥梁是对象，宿主环境通过提供一些列符合javascript语言的对象，提供各种各样的功能。


对象在javascript中就是一系列的键值对，就像java中的HashMap一样，不过，javascript中对象的属性可以有一些描述符
(property descriptor)，这在HashMap中是没有的。


属性描述符：


属性描述符分为两类：
数据描述符(data descriptor)，包含一系列boolean值，用以说明该属性是否允许修改、删除。
访问描述符(accessor descriptor)，包含get与set函数。


